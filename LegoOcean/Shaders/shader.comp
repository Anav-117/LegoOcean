#version 450

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct Particle {
  vec4 position;
  vec4 velocity;
};

layout (binding = 0) uniform UBO {
    float deltaTime;
} ubo;


layout(std140, binding = 1) readonly buffer ParticleIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleOut {
   Particle particlesOut[ ];
};

const vec3 gravity = vec3(0.0, 1.0, 0.0);

void main() {
	uint gid = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[gid];

    barrier();

    particleIn.velocity.xyz += gravity * ubo.deltaTime;

    particleIn.position += particleIn.velocity * ubo.deltaTime;

    if (particleIn.position.y > 100.0) {
        particleIn.position.y = 100.0;
        particleIn.velocity.y = -1.0 * particleIn.velocity.y;
    }

    particlesOut[gid] = particleIn;
}

